name: Daily OpenAPI Watch

on:
  schedule:
    - cron: "30 14 * * *"   # 14:30 UTC â‰ˆ 7:30am PT; adjust as needed
  workflow_dispatch:

jobs:
  watch:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 1) Fetch and update meta/history (writes dated files on change)
      - name: Fetch OpenAPI & update meta/history
        run: node index.mjs

      # 2) Show the last 50 runs in the job summary
      - name: Show last 50 runs in summary
        run: |
          echo "### Last 50 runs" >> $GITHUB_STEP_SUMMARY
          if [ -f logs/runs.log ]; then
            tail -n 50 logs/runs.log >> $GITHUB_STEP_SUMMARY
          else
            echo "_No runs.log yet_" >> $GITHUB_STEP_SUMMARY
          fi

      # 3) Read latest/previous from meta.json
      - name: Read latest/previous from meta
        id: meta
        run: |
          LATEST=$(jq -r '.latestFile' data/meta.json)
          PREV=$(jq -r '.previousFile' data/meta.json)
          echo "From meta -> Latest: $LATEST  Previous: $PREV"
          echo "LATEST=$LATEST" >> $GITHUB_ENV
          echo "PREV=$PREV" >> $GITHUB_ENV

      # 4) Fallback: pick the two most recent **dated spec files** (exclude meta.json)
      - name: Fallback latest/previous from dated files
        if: ${{ env.PREV == '' || env.PREV == 'null' }}
        run: |
          mapfile -t FILES < <(ls -t data/[0-9][0-9][0-9][0-9]-*-*.json 2>/dev/null || true)
          if [ "${#FILES[@]}" -ge 2 ]; then
            LATEST=$(basename "${FILES[0]}")
            PREV=$(basename "${FILES[1]}")
            echo "Fallback -> Latest: $LATEST  Previous: $PREV"
            echo "LATEST=$LATEST" >> $GITHUB_ENV
            echo "PREV=$PREV" >> $GITHUB_ENV
          else
            echo "Not enough dated spec files yet for a diff."
          fi

      # 5) Sanity print the pair
      - name: Print comparison pair
        if: ${{ env.PREV != '' && env.PREV != 'null' }}
        run: |
          echo "Comparing:"
          echo "  base:     data/${{ env.PREV }}"
          echo "  revision: data/${{ env.LATEST }}"
          ls -l data/${{ env.PREV }} data/${{ env.LATEST }}

      # 6) oasdiff JSON diff (machine-readable)
      - name: oasdiff (JSON)
        if: ${{ env.PREV != '' && env.PREV != 'null' }}
        uses: oasdiff/oasdiff-action/diff@v0.0.21
        with:
          base: data/${{ env.PREV }}
          revision: data/${{ env.LATEST }}
          format: json
          output-to-file: diffs/${{ github.run_id }}.json

      # 7) Ensure a file exists even if the diff is empty (format-only changes)
      - name: Ensure diff artifact exists
        if: ${{ env.PREV != '' && env.PREV != 'null' }}
        run: |
          f="diffs/${{ github.run_id }}.json"
          [ -s "$f" ] || echo '{}' > "$f"

      # 8) Commit artifacts directly to main (includes logs to keep history)
      - name: Commit changes
        run: |
          git config user.name "openapi-bot"
          git config user.email "openapi-bot@example.com"
          git add data diffs logs || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: store latest spec + diff + run log [skip ci]"
            git push
          fi
