name: Daily OpenAPI Watch

on:
  schedule:
    - cron: "30 14 * * *"   # 14:30 UTC ≈ 7:30 AM PT
  workflow_dispatch:

concurrency:
  group: openapi-watcher
  cancel-in-progress: false

jobs:
  watch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # 1) Fetch spec and maybe save new file
      - name: Fetch OpenAPI & update meta/history
        run: node index.mjs

      # 2) Detect if index.mjs actually saved something
      - name: Check change flag
        id: changed
        run: |
          if [ -f .changed ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # 3) Show recent run log
      - name: Show last 50 runs
        run: |
          echo "### Last 50 runs" >> $GITHUB_STEP_SUMMARY
          [ -f logs/runs.log ] && tail -n 50 logs/runs.log >> $GITHUB_STEP_SUMMARY || echo "_No runs yet_" >> $GITHUB_STEP_SUMMARY

      # 4) Read latest / previous from meta.json
      - name: Read latest/previous from meta
        id: meta
        if: steps.changed.outputs.changed == 'true'
        run: |
          LATEST=$(jq -r '.latestFile' data/meta.json)
          PREV=$(jq -r '.previousFile' data/meta.json)
          echo "LATEST=$LATEST" >> $GITHUB_ENV
          echo "PREV=$PREV" >> $GITHUB_ENV
          echo "Comparing $PREV → $LATEST"

      # 5) Run oasdiff only if spec changed
      - name: oasdiff (JSON)
        if: steps.changed.outputs.changed == 'true' && env.PREV != '' && env.PREV != 'null'
        uses: oasdiff/oasdiff-action/diff@v0.0.21
        with:
          base: data/${{ env.PREV }}
          revision: data/${{ env.LATEST }}
          format: json
          output-to-file: diffs/${{ github.run_id }}.json

      # 6) Ensure diff file always exists
      - name: Ensure diff artifact exists
        if: steps.changed.outputs.changed == 'true'
        run: |
          f="diffs/${{ github.run_id }}.json"
          [ -s "$f" ] || echo '{}' > "$f"

      # 7) Create an issue only when we truly saved a new spec
      - name: Create GitHub issue on real change
        if: steps.changed.outputs.changed == 'true'
        uses: actions/github-script@v7
        env:
          PREV: ${{ env.PREV }}
          LATEST: ${{ env.LATEST }}
        with:
          script: |
            const fs = require('fs');
            const path = `diffs/${process.env.GITHUB_RUN_ID}.json`;
            const diff = fs.readFileSync(path, 'utf8');
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const title = `OpenAPI change detected: ${process.env.PREV} → ${process.env.LATEST}`;
            const body = [
              `**Base:** \`data/${process.env.PREV}\``,
              `**Revision:** \`data/${process.env.LATEST}\``,
              `**Run:** ${runUrl}`,
              '',
              '```json',
              diff.length > 60000 ? diff.slice(0, 60000) + '\\n…(truncated)…' : diff,
              '```'
            ].join('\n');

            const label = 'api-change';
            try {
              await github.rest.issues.createLabel({
                owner: context.repo.owner, repo: context.repo.repo, name: label
              });
            } catch (_) {} // label probably exists

            const created = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: [label]
            });
            core.info(`Created issue #${created.data.number}`);

      # 8) Commit artifacts (data, diffs, logs, .changed removed)
      - name: Commit artifacts
        run: |
          rm -f .changed || true
          git config user.name "openapi-bot"
          git config user.email "openapi-bot@example.com"
          git add data diffs logs || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update spec + diff + logs [skip ci]"
            git push
          fi
